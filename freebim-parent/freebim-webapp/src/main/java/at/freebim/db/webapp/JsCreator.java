/******************************************************************************
 * Copyright (C) 2009-2019  ASI-Propertyserver
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see {@literal<http://www.gnu.org/licenses/>}.
 *****************************************************************************/
package at.freebim.db.webapp;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import at.freebim.db.domain.base.ComponentType;
import at.freebim.db.domain.base.ContributionType;
import at.freebim.db.domain.base.State;
import at.freebim.db.domain.base.rel.RelationTypeEnum;
import at.freebim.db.domain.json.NodeFields;
import at.freebim.db.domain.json.rel.RelationFields;

/**
 * This class is used to create javascript files.
 * 
 * @author rainer.breuss@uibk.ac.at
 *
 */
public class JsCreator {

	public static void main(String[] args) {
		
		JsCreator c = new JsCreator();
		
		//The directory from the javascript-files
		String dir = "src/main/webapp/resources/js/";
		
		//Try to create the javascript files
		try {
			c.createJsFiles(dir, 0);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Creates the javascript files: reltype.js, state.js and nodefields.js.
	 * 
	 * @param dir the directory to which the files should be written
	 * @param tried 0 if the project is build and 1 if the project is build from the parent project
	 * @throws IOException this exception is thrown when there is a problem writing to a file
	 */
	private void createJsFiles(String dir, int tried) throws IOException {
		String filename;
		try {
			filename = dir + "reltype.js";
			this.writeRelTypes(filename);
			System.out.println("File '" + filename + "' created.");
			
			filename = dir + "state.js";
			this.writeStates(filename);
			System.out.println("File '" + filename + "' created.");
			
			filename = dir + "nodeFields.js";
			this.writeNodeFields(filename);
			System.out.println("File '" + filename + "' created.");
			
		} catch (IOException e) {
			if (tried == 0) {
				// adjust path if application is built from 'freebim-parent' project
				dir = "./freebim-webapp/" + dir;
				createJsFiles(dir, 1);
				return;
			} else {
				throw e;
			}
		}
		
	}
	
	/**
	 * Add the header text to a javascript file.
	 * 
	 * @param b the {@link StringBuilder} that holds 
	 */
	private void addHeader(StringBuilder b)  {
		b.append("/*\n");
		b.append(" * generated source file\n");
		b.append(" * do not edit this file\n");
		b.append(" *\n");
		b.append(" * modify class '");
		b.append(this.getClass().getName());
		b.append("' instead.\n");
		b.append(" */\n");
		b.append("\n");
	}
	
	
	/**
	 * Creates a file with the passed filename. In that file a header is written and the type of 
	 * relations ({@link RelationTypeEnum}) with the corresponding ui names.
	 * Everything is written as javascript.
	 * 
	 * @param filename the name of the file that will be created
	 * @throws IOException the exception that is thrown when there is a problem with creating or writing to a file
	 */
	private void writeRelTypes(String filename) throws IOException {
		File f = new File(filename);
		FileWriter fw = new FileWriter(f);
		StringBuilder b = new StringBuilder();
		StringBuilder c = new StringBuilder();
		
		addHeader(b);
		b.append("\nat.freebim.db.domain.RelationType = {\n");
		c.append("\nat.freebim.db.domain.RelationTypeEnum = {\n");
		
		int i = 0;
		for (RelationTypeEnum t : RelationTypeEnum.values()) {
			if (i++ > 0) {
				b.append(",\n");
				c.append(",\n");
			}
			b.append("\t");
			c.append("\t");
			
			b.append(t.getCode());
			c.append(t.name());
			
			b.append(":\t ");
			c.append(":\t ");
			
			b.append("{ uiName: \"");
			b.append(t.getUiName());
			b.append("\" }");
			
			c.append(t.getCode());

		}
		b.append("\n};\n");
		c.append("\n};\n");
		
		fw.write(b.toString());
		fw.write(c.toString());
		fw.flush();
		fw.close();
	}
	
	/**
	 * Creates a file with the passed filename. In that file a header is written and 
	 * the {@link State}s with the corresponding css classes. Everything is written as javascript.
	 * 
	 * @param filename the name of the file that will be created
	 * @throws IOException the exception that is thrown when there is a problem with creating or writing to a file
	 */
	private void writeStates(String filename) throws IOException {
		File f = new File(filename);
		FileWriter fw = new FileWriter(f);
		StringBuilder b = new StringBuilder();
		
		addHeader(b);
		b.append("\nat.freebim.db.domain.State = {\n");
		b.append("\tclassName: \"State\",\n");
		b.append("\ttitle: \"Status\",\n");
		b.append("\tP: ");
		b.append(State.CHECKED.getCode());
		b.append(",\n");
		b.append("\tINV: ");
		b.append(State.REJECTED.getCode());
		b.append(",\n");
		b.append("\tR: ");
		b.append(State.RELEASED.getCode());
		b.append(",\n");
		b.append("\tvalues: [ ");
		int i = 0;
    	for (State s : State.values()) {
    		if (i++ > 0)
    			b.append(", ");
    		b.append(s.getCode());
    	}

    	b.append("],\n");
    	b.append("\tdata: function(id, elem) {\n");
    	b.append("\t\tat.freebim.db.domain.State.css(id, elem);\n");
    	b.append("\t\tswitch (id) {\n");
    	b.append("\t\tdefault:\n");
    	
    	for (State s : State.values()) {
    		b.append("\t\tcase ");
    		b.append(s.getCode());
    		b.append(":\n");
    		b.append("\t\t\treturn net.spectroom.js.i18n.get(\"");
    		b.append(s.getUiName());
    		b.append("\");\n");
    	}
    	
    	b.append("\t\t}");
    	b.append("\n\t},\n");
    	b.append("\tdataValue : function (id) {\n");
    	b.append("\t\treturn id;\n");
    	b.append("\t},\n");
    	b.append("\tcss : function (id, elem) {\n");
    	b.append("\t\tif (id && elem) {\n");
		for (State s : State.values()) {
			b.append("\t\t\tjq(elem).removeClass(\"");
			b.append(s.getCssClass());
			b.append("\");\n");
		}
    	b.append("\t\t\tswitch (id) {\n");
    	b.append("\t\t\tdefault :\n");
    	
    					for (State s : State.values()) {
    						b.append("\t\t\tcase ");
    						b.append(s.getCode());
    						b.append(":\n");
    						b.append("\t\t\t\tjq(elem).addClass(\"");
    						b.append(s.getCssClass());
    						b.append("\");\n");
    						b.append("\t\t\t\tbreak;\n");
    					}
    					b.append("\t\t\t}\n");
    					b.append("\t\t}\n");
    					b.append("\t}\n");
    					b.append("};\n");
		
		fw.write(b.toString());
		fw.flush();
		fw.close();
	}
	
	/**
	 * Creates a file with the passed filename. In that file a header and 
	 * the {@link NodeFields}, {@link RelationFields}, {@link ContributionType}s, {@link ComponentType}s
	 * are written. Everything is written as javascript.
	 * 
	 * @param filename the name of the file that will be created
	 * @throws IOException the exception that is thrown when there is a problem with creating or writing to a file
	 */
	private void writeNodeFields(String filename) throws IOException {
		File f = new File(filename);
		FileWriter fw = new FileWriter(f);
		StringBuilder b = new StringBuilder();
		
		addHeader(b);
		b.append("\nat.freebim.db.domain.NodeFields = {\n");
		
		int i = 0;
		for (NodeFields nf : NodeFields.values()) {
			if (i++ > 0)
				b.append(",\n");
			b.append("\t");
			b.append(nf.name());
			b.append(":\t ");
			b.append("\"");
			b.append(nf.getSerial());
			b.append("\"");
		}

		b.append("\n};\n");
		
		fw.write(b.toString());
		fw.flush();
		
		b.setLength(0);
		b.append("\nat.freebim.db.domain.RelationFields = {\n");
		i = 0;
		for (RelationFields nf : RelationFields.values()) {
			if (i++ > 0)
				b.append(",\n");
			b.append("\t");
			b.append(nf.name());
			b.append(":\t ");
			b.append("\"");
			b.append(nf.getSerial());
			b.append("\"");
		}
		
		b.append(",\n\n\tmake : function (field, type, cn, dir) {\n");
		b.append("\t\tvar rel = {}, rf = at.freebim.db.domain.RelationFields;\n");
		b.append("\t\trel[rf.FIELD_NAME] = field;\n");
		b.append("\t\trel[rf.TYPE] = type;\n");
		b.append("\t\trel[rf.CLASS_NAME] = cn;\n");
		b.append("\t\trel[rf.DIRECTION] = dir;\n");
		b.append("\t\treturn rel;\n");
		b.append("\t}\n");

		b.append("\n};\n");
		
		fw.write(b.toString());
		fw.flush();

		b.setLength(0);
		b.append("\nat.freebim.db.domain.ContributionType = {\n");
		i = 0;
		for (ContributionType contrType : ContributionType.values()) {
			if (i++ > 0)
				b.append(",\n");
			b.append("\t");
			b.append(contrType.name());
			b.append(":\t ");
			b.append(contrType.getCode());
		}
		b.append("\n};\n");
		
		fw.write(b.toString());
		fw.flush();

		b.setLength(0);
		b.append("\nat.freebim.db.domain.ComponentTypeEnum = {\n");
		i = 0;
		for (ComponentType compType : ComponentType.values()) {
			if (i++ > 0)
				b.append(",\n");
			b.append("\t");
			b.append(compType.name());
			b.append(":\t ");
			b.append(compType.getCode());
		}
		b.append("\n};\n");
		
		fw.write(b.toString());
		fw.flush();

		fw.close();
	}
	


}
